name: CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'MoviesAPI/**'
      - 'MoviesAngular/**'
      - 'nginx/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

concurrency:
  group: movies-deploy
  cancel-in-progress: true

jobs:
  test-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ----- Backend (.NET) -----
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Compila directamente el .csproj (evitamos la .sln con referencia rota a tests)
      - name: Restore & Build backend
        run: |
          dotnet restore MoviesAPI/MoviesAPI.csproj
          dotnet build MoviesAPI/MoviesAPI.csproj --configuration Release --no-restore

      # ----- Frontend (Angular) -----
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install & Build frontend
        working-directory: MoviesAngular
        run: |
          npm ci --legacy-peer-deps
          npm run build

      # Guardamos el dist para poder usarlo en el deploy
      - name: Archive Angular dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-angular
          path: MoviesAngular/dist/MoviesAngular/browser

  deploy:
    runs-on: ubuntu-latest
    needs: [test-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
  
      # Carga la clave para SSH
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
  
      # Descarga el artefacto EXACTAMENTE del subpath del browser
      - name: Download Angular dist
        uses: actions/download-artifact@v4
        with:
          name: dist-angular
          path: dist-angular
  
      # (Debug opcional) Ver qué descargó realmente
      - name: List downloaded dist
        run: |
          echo "Tree of dist-angular:"
          ls -R dist-angular || true
  
      # Asegura que el directorio remoto exista y sea tuyo
      - name: Prepare remote workspace
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" \
            "mkdir -p /srv/movies/MoviesAngular/dist/MoviesAngular/browser && \
             sudo chown -R $SSH_USER:$SSH_USER /srv/movies/MoviesAngular/dist"
  
      # Copia el contenido del browser al server
      # OJO: observa el path de origen, ahora apunta al subcarpeta correcta
      - name: Upload Angular dist via SCP
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          # Si subiste el artefacto como 'MoviesAngular/dist', el contenido real estará en:
          # dist-angular/MoviesAngular/dist/MoviesAngular/browser
          scp -o StrictHostKeyChecking=no -P "$SSH_PORT" -r \
            dist-angular/MoviesAngular/dist/MoviesAngular/browser/* \
            "$SSH_USER@$SSH_HOST:/srv/movies/MoviesAngular/dist/MoviesAngular/browser/"
  
      # Actualiza código backend y recrea contenedores
      - name: Compose up (backend/nginx)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" bash << 'EOF'
          set -e
          cd /srv/movies
          git fetch --all
          git reset --hard origin/main
          docker network inspect appnet >/dev/null 2>&1 || docker network create appnet
          docker compose up -d --build
          EOF
