name: CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'MoviesAPI/**'
      - 'MoviesAngular/**'
      - 'nginx/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

concurrency:
  group: movies-deploy
  cancel-in-progress: true

jobs:
  test-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ----- Backend (.NET) -----
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Compila directamente el .csproj (evitamos la .sln con referencia rota a tests)
      - name: Restore & Build backend
        run: |
          dotnet restore MoviesAPI/MoviesAPI.csproj
          dotnet build MoviesAPI/MoviesAPI.csproj --configuration Release --no-restore

      # ----- Frontend (Angular) -----
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install & Build frontend
        working-directory: MoviesAngular
        run: |
          npm ci --legacy-peer-deps
          npm run build

      # Guardamos el dist para usarlo en el deploy
      - name: Archive Angular dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-angular
          path: MoviesAngular/dist/MoviesAngular/browser

  deploy:
    runs-on: ubuntu-latest
    needs: [ test-build ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Test SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          echo "Testing $SSH_HOST:$SSH_PORT"
          getent hosts "$SSH_HOST" || true
          sudo apt-get update && sudo apt-get install -y netcat-openbsd
          nc -vz -w 5 "$SSH_HOST" "$SSH_PORT"
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "echo connected"

      - name: Download Angular dist
        uses: actions/download-artifact@v4
        with:
          name: dist-angular
          path: dist-angular

      # Prepara el workspace remoto (actualiza repo, crea red y carpeta dist si no existe)
      - name: Prepare remote workspace
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          : "${SSH_PORT:=22}"
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" bash << 'EOF'
          set -e
          cd /srv/movies
          # Repo al último commit de main
          git fetch --all
          git reset --hard origin/main
          # Red docker si no existe
          docker network inspect appnet >/dev/null 2>&1 || docker network create appnet
          # Carpeta de artefactos Angular para nginx
          mkdir -p /srv/movies/MoviesAngular/dist/MoviesAngular/browser
          EOF

      # Sube los archivos estáticos de Angular al servidor (nginx los sirve por bind mount)
      - name: Upload Angular dist via SCP
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          : "${SSH_PORT:=22}"
          scp -o StrictHostKeyChecking=no -P "$SSH_PORT" -r \
            dist-angular/MoviesAngular/browser/* \
            "$SSH_USER@$SSH_HOST:/srv/movies/MoviesAngular/dist/MoviesAngular/browser/"

      # Reconstruye/actualiza contenedores (backend se re-build con el nuevo código)
      - name: Compose up (backend/nginx)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          : "${SSH_PORT:=22}"
          ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" bash << 'EOF'
          set -e
          cd /srv/movies
          docker compose up -d --build
          EOF
